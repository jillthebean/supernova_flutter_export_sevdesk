import { Eta } from "eta";

export function renderColorScheme(eta: Eta, data: ColorSchemeTemplateData): string {
    return eta.renderString(colorSchemeTemplate, data);
}

export type ColorSchemeTemplateData = {
  className: string,
  colors: Array<string>
  themes: Record<string, Map<string,string>>
}

const colorSchemeTemplate = `
import 'package:flutter/material.dart';
import 'package:sev_design_tokens/src/colors/primitive_colors.dart';

/* This file was generated by Supernova, don't change by hand */
@immutable
class <%=it.className%> extends ThemeExtension<<%=it.className%>> {
  const <%=it.className%>({
  <% for(var color of it.colors) {%>
    required this.<%=color%>,
  <% } %>
  });

  <% for(var themeName in it.themes) {
    var theme = it.themes[themeName]
    %>
  factory <%=it.className%>.<%=themeName%>() => <%=it.className%>(
    <% for(var color of it.colors) {%>
      <%=color%>: <%=theme[color]%>,
    <% } %>
      );
  <% } %>

  <% for(var color of it.colors) {%>
  final Color <%=color%>;
  <% } %>

  @override
  ThemeExtension<<%=it.className%>> copyWith({
    <% for(var color of it.colors) {%>
    Color? <%=color%>,
    <% } %>
  }) {
    return <%=it.className%>(
      <% for(var color of it.colors) {%>
      <%=color%>:
        <%=color%> ?? this.<%=color%>,
      <% } %>
    );
  }

  @override
  ThemeExtension<<%=it.className%>> lerp(
    <%=it.className%>? other,
    double t,
  ) {
    if (other is! <%=it.className%>) {
      return this;
    }
    return <%=it.className%>(
      <% for(var color of it.colors) {%>
  <%=color%>: Color.lerp(
        <%=color%>,
        other.<%=color%>,
        t,
      )!,
      <% } %>
    );
  }
  
  static <%=it.className%> of(BuildContext context) =>
      Theme.of(context).extension<<%=it.className%>>()!;
}
`


