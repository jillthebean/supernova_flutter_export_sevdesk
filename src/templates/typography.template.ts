import { Eta } from "eta";

export function renderTypographyScheme(eta: Eta, data: TypographyTemplateData): string {
    return eta.renderString(typographyTemplate, data);
}

export type FontDescription = {
  lineHeight: string,
  fontSize: string,
  fontFamily: string,
  fontWeight: string,
  letterSpacing: string,
  decoration: string,
}

export type TypographyTemplateData = {
  className: string,
  typographies: Map<String, FontDescription>,
}

const typographyTemplate = `
import 'package:flutter/material.dart';
import 'package:sev_design_tokens/src/typography/font_sizes.dart';
import 'package:sev_design_tokens/src/typography/letter_spacings.dart';
import 'package:sev_design_tokens/src/typography/line_heights.dart';

export 'package:sev_design_tokens/src/typography/font_sizes.dart';
export 'package:sev_design_tokens/src/typography/letter_spacings.dart';
export 'package:sev_design_tokens/src/typography/line_heights.dart';


/* This file was generated by Supernova, don't change by hand */
@immutable
class <%=it.className%> extends ThemeExtension<<%=it.className%>> {
  const <%=it.className%>({
  <% for(var typos in it.typographies) {%>
    required this.<%=typos%>,
  <% } %>
  });

  factory <%=it.className%>.init() => <%=it.className%>(
    <% for(var typo in it.typographies) {%>
      <%=typo%>:  const TextStyle(
        fontSize: <%=it.typographies[typo].fontSize%>,
        height: <%=it.typographies[typo].lineHeight%>, 
        fontFamily: '<%=it.typographies[typo].fontFamily%>',
        fontWeight: <%=it.typographies[typo].fontWeight%>,
        letterSpacing: <%=it.typographies[typo].letterSpacing%>,
        decoration: <%=it.typographies[typo].decoration%>,
        // paragraph spacing <-- geht nur in RichText
        // paragraph indent <-- geht nur in RichText
        // uppercase <-- muss hÃ¤ndisch gemacht werden
      ),
    <% } %>
      );

  <% for(var typo in it.typographies) {%>
  final TextStyle <%=typo%>;
  <% } %>

  @override
  ThemeExtension<<%=it.className%>> copyWith({
    <% for(var typo in it.typographies) {%>
    TextStyle? <%=typo%>,
    <% } %>
  }) {
    return <%=it.className%>(
      <% for(var typo in it.typographies) {%>
      <%=typo%>:
        <%=typo%> ?? this.<%=typo%>,
      <% } %>
    );
  }

  @override
  ThemeExtension<<%=it.className%>> lerp(
    <%=it.className%>? other,
    double t,
  ) {
    if (other is! <%=it.className%>) {
      return this;
    }
    return <%=it.className%>(
      <% for(var typo in it.typographies) {%>
  <%=typo%>: TextStyle.lerp(
        <%=typo%>,
        other.<%=typo%>,
        t,
      )!,
      <% } %>
    );
  }
  
  static <%=it.className%> of(BuildContext context) =>
      Theme.of(context).extension<<%=it.className%>>()!;
}
`


